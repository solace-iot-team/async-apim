openapi: 3.0.0
info:
  title: Solace Async API Management Server
  description: 'Async API Management Server.'
  version: 0.2.2
servers:
- url: /apim-server/v1
tags:
- name: APSConfig
  description: "Configuration of the system."
- name: APSMonitor
  description: "Monitoring of the system."
- name: APSUsers
  description: "Users of the system."
- name: APSLogin
  description: "Login Service."
- name: Specification
  description: The swagger API specification
- name: APSAdministration
  description: Manage system settings and organizations/tenants.
paths:
  /apsExternalSystems/{organization_id}:
    parameters:
    - $ref: '#/components/parameters/organization_id'
    post:
      security:
      - InternalAuthBearerToken: []
      operationId: createApsExternalSystem
      description: Create an APSExternalSystem object.
      tags:
      - APSExternalSystems
      requestBody:
        description: The APSExternalSystem object to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APSExternalSystemCreate'
      responses:
        '201':
          description: Successful creation of new APSExternalSystem object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APSExternalSystem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          description: >
            "duplicate key": APSExternalSystem object with same id already exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      security:
      - InternalAuthBearerToken: []
      operationId: listApsExternalSystems
      description: Get a list of APSExternalSystem objects.
      tags:
      - APSExternalSystems
      responses:
        '200':
          description: Array of APSExternalSystem and total count. Returns empty array if none found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAPSExternalSystemsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /apsExternalSystems/{organization_id}/{external_system_id}:
    parameters:
    - $ref: '#/components/parameters/organization_id'
    - $ref: '#/components/parameters/external_system_id'
    get:
      security:
      - InternalAuthBearerToken: []
      operationId: getApsExternalSystem
      description: Get an APSExternalSystem object by id.
      tags:
      - APSExternalSystems
      responses:
        '200':
          description: The APSExternalSystem object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APSExternalSystem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      security:
      - InternalAuthBearerToken: []
      operationId: updateApsExternalSystem
      description:
        Update an APSExternalSystem object by id.
        Operation performs a merge update between the exsting object and the update request.
        Arrays are not merged but replaced in their entirety.
      tags:
      - APSExternalSystems
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/APSExternalSystemUpdate"
      responses:
        '200':
          description: The updated APSExternalSystem object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APSExternalSystem'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      security:
      - InternalAuthBearerToken: []
      operationId: deleteApsExternalSystem
      tags:
      - APSExternalSystems
      responses:
        '204':
          description: Deleted successfully.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          description: >
            "dependantObjects": APSExternalSystem has depedants.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
        '500':
          $ref: '#/components/responses/InternalServerError'

  /apsAdministration/apsOrganizations:
    post:
      security:
      - InternalAuthBearerToken: []
      operationId: createApsOrganization
      description: Create an APSOrganization object.
      tags:
      - APSAdministration
      requestBody:
        description: The APSOrganization object to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APSOrganizationCreate'
      responses:
        '201':
          description: Successful creation of new APSOrganization object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APSOrganization'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          description: >
            "duplicate key": APSOrganization object with same id already exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      security:
      - InternalAuthBearerToken: []
      operationId: listApsOrganizations
      description: Get a list of APSOrganization objects.
      tags:
      - APSAdministration
      responses:
        '200':
          description: Array of APSOrganizations and total count of APSOrganizations. Returns empty array if none found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAPSOrganizationResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /apsAdministration/apsOrganizations/{organization_id}:
    parameters:
    - $ref: '#/components/parameters/organization_id'
    get:
      security:
      - InternalAuthBearerToken: []
      operationId: getApsOrganization
      description: Get an APSOrganization object by id.
      tags:
      - APSAdministration
      responses:
        '200':
          description: The APSOrganization object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APSOrganization'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      security:
      - InternalAuthBearerToken: []
      operationId: updateApsOrganization
      description:
        Update an APSOrganization object by id.
        Operation performs a merge update between the exsting object and the update request.
        Arrays are not merged but replaced in their entirety.
      tags:
      - APSAdministration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/APSOrganizationUpdate"
      responses:
        '200':
          description: The updated APSOrganization object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APSOrganization'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      security:
      - InternalAuthBearerToken: []
      operationId: deleteApsOrganization
      tags:
      - APSAdministration
      responses:
        '204':
          description: Deleted successfully.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /apsConfig/apsConnectors:
    post:
      security:
      - InternalAuthBearerToken: []
      operationId: createApsConnector
      description: Create an APSConnector object.
      tags:
      - APSConfig
      requestBody:
        description: The APSConnector object to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APSConnectorCreate'
      responses:
        '201':
          description: Successful creation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APSConnector'
        '400':
          description: "Bad Request."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
            "*/*":
              schema:
                $ref: "#/components/schemas/APSError"
        '401':
          description: "Unauthorized."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
        '403':
          description: "Forbidden."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
        '422':
          description: "APSConnector object with connectorId already exists."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
        '500':
          description: "Internal Server Error."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
    get:
      security:
      - InternalAuthBearerToken: []
      operationId: listApsConnectors
      description: Get a list of APSConnectors.
      tags:
      - APSConfig
      responses:
        '200':
          description: Array of APSConnector objects and total count. Returns empty array if none found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApsConnectorsResponse'
        '400':
          description: "Bad Request."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
            "*/*":
              schema:
                $ref: "#/components/schemas/APSError"
        '401':
          description: "Unauthorized."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
        '403':
          description: "Forbidden."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
        '500':
          description: "Internal Server Error."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
  /apsConfig/apsConnectors/active:
    get:
      # security:
      # - InternalAuthBearerToken: []
      operationId: getActiveApsConnector
      description: Get the currently active APSConnector object.
      tags:
      - APSConfig
      responses:
        '200':
          description: The active APSConnector object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APSConnector'
        '400':
          description: "Bad Request."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
            "*/*":
              schema:
                $ref: "#/components/schemas/APSError"
        '401':
          description: "Unauthorized."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
        '403':
          description: "Forbidden."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
        '404':
          description: "Not Found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
        '500':
          description: "Internal Server Error."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"

  /apsConfig/apsConnectors/{connector_id}:
    parameters:
    - $ref: '#/components/parameters/connector_id'
    get:
      security:
      - InternalAuthBearerToken: []
      operationId: getApsConnector
      description: Get an APSConnector object by id.
      tags:
      - APSConfig
      responses:
        '200':
          description: The APSConnector object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APSConnector'
        '400':
          description: "Bad Request."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
            "*/*":
              schema:
                $ref: "#/components/schemas/APSError"
        '401':
          description: "Unauthorized."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
        '403':
          description: "Forbidden."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
        '404':
          description: "Not Found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
        '500':
          description: "Internal Server Error."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
    put:
      security:
      - InternalAuthBearerToken: []
      operationId: replaceApsConnector
      description: Replace an APSConnector object by connector id.
      tags:
      - APSConfig
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/APSConnectorReplace"
      responses:
        '200':
          description: The APSConnector object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APSConnector'
        '400':
          description: "Bad Request."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
            "*/*":
              schema:
                $ref: "#/components/schemas/APSError"
        '401':
          description: "Unauthorized."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
        '403':
          description: "Forbidden."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
        '404':
          description: "Not Found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
        '500':
          description: "Internal Server Error."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
    delete:
      security:
      - InternalAuthBearerToken: []
      operationId: deleteApsConnector
      tags:
      - APSConfig
      responses:
        '204':
          description: Deleted successfully.
        '400':
          description: "Bad Request."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
            "*/*":
              schema:
                $ref: "#/components/schemas/APSError"
        '401':
          description: "Unauthorized."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
        '403':
          description: "Forbidden."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
        '404':
          description: "Not Found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
        '500':
          description: "Internal Server Error."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
  /apsConfig/apsConnectors/{connector_id}/active:
    parameters:
    - $ref: '#/components/parameters/connector_id'
    post:
      security:
      - InternalAuthBearerToken: []
      operationId: setApsConnectorActive
      description: Sets the APSConnector object to active.
      tags:
      - APSConfig
      responses:
        '201':
          description: Success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APSConnector'
        '400':
          description: "Bad Request."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
            "*/*":
              schema:
                $ref: "#/components/schemas/APSError"
        '401':
          description: "Unauthorized."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
        '403':
          description: "Forbidden."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
        '404':
          description: "Not Found."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
        '500':
          description: "Internal Server Error."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
  /apsConfig/apsAbout:
    get:
      operationId: getApsAbout
      description: Get the APSAbout object.
      tags:
      - APSConfig
      responses:
        '200':
          description: The APSAbout object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APSAbout'
        '400':
          description: "Bad Request."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
            "*/*":
              schema:
                $ref: "#/components/schemas/APSError"
        '401':
          description: "Unauthorized."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
        '403':
          description: "Forbidden."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
        '500':
          description: "Internal Server Error."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"

  /apsMonitor/apsStatus:
    get:
      operationId: getApsStatus
      description: Get the APSStatus object.
      tags:
      - APSMonitor
      responses:
        '200':
          description: The APSStatus object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APSStatus'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /apsBusinessGroups/{organization_id}:
    parameters:
    - $ref: '#/components/parameters/organization_id'
    post:
      security:
      - InternalAuthBearerToken: []
      operationId: createApsBusinessGroup
      description: Create an APSBusinessGroup object.
      tags:
      - APSBusinessGroups
      requestBody:
        description: The APSBusinessGroupCreate object.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APSBusinessGroupCreate'
      responses:
        '201':
          description: Successful creation of new APSBusinessGroup.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APSBusinessGroupResponse'
        '422':
          description: "Business Group with groupId already exists or invalid object reference"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      security:
      - InternalAuthBearerToken: []
      operationId: listApsBusinessGroups
      description: Get a list of APSBusinessGroupResponse objects in the organization.
      tags:
      - APSBusinessGroups
      responses:
        '200':
          description: Array of APSBusinessGroupResponse object and total count of the objects. Returns empty array if none found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAPSBusinessGroupsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /apsBusinessGroups/{organization_id}/externalSystem/{external_system_id}:
    parameters:
    - $ref: '#/components/parameters/organization_id'
    - $ref: '#/components/parameters/external_system_id'
    get:
      security:
      - InternalAuthBearerToken: []
      operationId: listApsBusinessGroupsByExternalSystem
      description: Get a list of APSBusinessGroupResponse objects by external system id.
      tags:
      - APSBusinessGroups
      responses:
        '200':
          description: Array of APSBusinessGroupResponse object and total count of the objects. Returns empty array if none found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAPSBusinessGroupsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /apsBusinessGroups/{organization_id}/{businessgroup_id}:
    parameters:
    - $ref: '#/components/parameters/organization_id'
    - $ref: '#/components/parameters/businessgroup_id'
    get:
      security:
      - InternalAuthBearerToken: []
      operationId: getApsBusinessGroup
      description: Get a APSBusinessGroupResponse object by business group id.
      tags:
      - APSBusinessGroups
      responses:
        '200':
          description: The APSBusinessGroupResponse object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APSBusinessGroupResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      security:
      - InternalAuthBearerToken: []
      operationId: updateApsBusinessGroup
      description:
        Update an APSBusinessGroup object by business group id.
        Operation performs a merge update between the exsting object and the update request.
        Arrays are not merged but replaced in their entirety.
      tags:
      - APSBusinessGroups
      requestBody:
        description: The APSBusinessGroupUpdate object.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/APSBusinessGroupUpdate"
      responses:
        '200':
          description: The APSBusinessGroup object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APSBusinessGroupResponse'
        '422':
          description: "Invalid object reference"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      security:
      - InternalAuthBearerToken: []
      operationId: deleteApsBusinessGroup
      description: Delete an APSBusinessGroup object.
      tags:
      - APSBusinessGroups
      responses:
        '204':
          description: Deleted successfully.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          description: "Invalid object reference"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
        '500':
          $ref: '#/components/responses/InternalServerError'
  /apsBusinessGroups/{organization_id}/{businessgroup_id}/members:
    parameters:
    - $ref: '#/components/parameters/organization_id'
    - $ref: '#/components/parameters/businessgroup_id'
    get:
      security:
      - InternalAuthBearerToken: []
      operationId: listApsBusinessGroupMembers
      description: Get a list of members (userIds).
      tags:
      - APSBusinessGroups
      responses:
        '200':
          description: The userId list. Empty list if none found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APSUserIdList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /apsBusinessGroups/{organization_id}/externalReference/{external_reference_id}:
    parameters:
    - $ref: '#/components/parameters/organization_id'
    - $ref: '#/components/parameters/external_reference_id'
    get:
      security:
      - InternalAuthBearerToken: []
      operationId: getApsBusinessGroupByExternalReference
      description: Get a APSBusinessGroupResponse object by external reference id.
      tags:
      - APSBusinessGroups
      responses:
        '200':
          description: The APSBusinessGroupResponse object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APSBusinessGroupResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /apsUsers:
    post:
      operationId: createApsUser
      description: Create an APSUser object.
      tags:
      - APSUsers
      requestBody:
        description: The APSUser to create.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APSUserCreate'
      responses:
        '201':
          description: Successful creation of new APSUser.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APSUserResponse'
        '422':
          description: "User with userId already exists or invalid object reference"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    get:
      operationId: listApsUsers
      description: Get a list of APSUserResponses.
      tags:
      - APSUsers
      parameters:
      - $ref: '#/components/parameters/page_size'
      - $ref: '#/components/parameters/page_number'
      - $ref: '#/components/parameters/sort_field_name'
      - $ref: '#/components/parameters/sort_direction'
      - $ref: '#/components/parameters/search_word_list'
      - $ref: '#/components/parameters/search_organization_id'
      - $ref: '#/components/parameters/exclude_search_organization_id'
      - $ref: '#/components/parameters/search_is_activated'
      - $ref: '#/components/parameters/search_user_id'
      responses:
        '200':
          description: Array of APSUserResponse and total count of APSUsers. Returns empty array if none found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApsUsersResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /apsUsers/{user_id}:
    parameters:
    - $ref: '#/components/parameters/user_id'
    get:
      operationId: getApsUser
      description: Get a APSUserResponse object by user id.
      tags:
      - APSUsers
      responses:
        '200':
          description: The APSUserResponse object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APSUserResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    patch:
      operationId: updateApsUser
      description:
        Update an APSUser object by user id.
        Operation performs a merge update between the exsting APSUser object and the update request.
        Arrays are not merged but replaced in their entirety.
      tags:
      - APSUsers
      requestBody:
        description: Update an APSUser object.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/APSUserUpdate"
      responses:
        '200':
          description: The APSUser object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APSUserResponse'
        '422':
          description: "Invalid object reference"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/APSError"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      operationId: deleteApsUser
      description: Delete an APSUser object by user id.
      tags:
      - APSUsers
      responses:
        '204':
          description: Deleted successfully.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /apsSession/login:
    get:
      operationId: apsGetLogin
      description: Redirects to the login page of the configured IDP.
      tags:
      - APSSession
      responses:
        '200':
          description: Use internal login.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APSLoginInternal'
        '302':
          description: Redirect to external login page.
          # content:
          #   application/json:
          #     schema:
          #       $ref: '#/components/schemas/APSSessionRefreshTokenResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      operationId: apsLogin
      description: Login.
      tags:
      - APSSession
      requestBody:
        description: The login credentials.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APSUserLoginCredentials'
      responses:
        '200':
          description: Successful login.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APSSessionLoginResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /apsSession/refreshToken:
    get:
      security:
      - InternalAuthRefreshToken: []
      operationId: apsRefreshToken
      description: Refresh auth token.
      tags:
      - APSSession
      responses:
        '200':
          description: Successful login.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APSSessionRefreshTokenResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /apsSession/logout:
    get:
      security:
      - InternalAuthBearerToken: []
      operationId: apsLogout
      description: Logout user.
      tags:
      - APSSession
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APSSessionLogoutResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /apsSession/logoutAll:
    post:
      security:
      - InternalAuthBearerToken: []
      operationId: apsLogoutAll
      description: Invalidate current sessions for all users. Use when system was re-configured to force users to login again.
      tags:
      - APSSession
      responses:
        '204':
          description: Successful logout.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /apsSession/{organization_id}/logoutAll:
    parameters:
    - $ref: '#/components/parameters/organization_id'
    post:
      security:
      - InternalAuthBearerToken: []
      operationId: logoutOrganizationAll
      description: Invalidate current sessions for all users in the organization. Use when organization was re-configured to force users to login again.
      tags:
      - APSSession
      responses:
        '204':
          description: Successful logout.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /apsSecureTests/test:
    get:
      security:
      - InternalAuthBearerToken: []
      operationId: apsTest
      description: Test protected resource.
      tags:
      - APSSecureTests
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APSSecureTestResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  # /apsLogin/login:
  #   post:
  #     operationId: login
  #     description: Login.
  #     tags:
  #     - APSLogin
  #     requestBody:
  #       description: The login credentials.
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/APSUserLoginCredentials'
  #     responses:
  #       '200':
  #         description: Successful login.
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/APSUserResponse'
  #       '400':
  #         description: "Bad Request."
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/APSError"
  #           "*/*":
  #             schema:
  #               $ref: "#/components/schemas/APSError"
  #       '401':
  #         description: "Unauthorized."
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/APSError"
  #       '500':
  #         description: "Internal Server Error."
  #         content:
  #           application/json:
  #             schema:
  #               $ref: "#/components/schemas/APSError"
  # /apsLogin/loginAs:
  #   post:
  #     operationId: loginAs
  #     description: Login on behalf of another user. Checks if user has given consent. Applicable also for non-active users. Not applicable for root user.
  #     tags:
  #     - APSLogin
  #     requestBody:
  #       description: The login as request.
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/APSUserLoginAsRequest'
  #     responses:
  #       '200':
  #         description: Successful login.
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/APSUserResponse'
  #       '400':
  #         $ref: '#/components/responses/BadRequest'
  #       '401':
  #         $ref: '#/components/responses/Unauthorized'
  #       '403':
  #         $ref: '#/components/responses/Forbidden'
  #       '404':
  #         $ref: '#/components/responses/NotFound'
  #       '500':
  #         $ref: '#/components/responses/InternalServerError'
  # /apsLogin/logoutAll:
  #   post:
  #     operationId: logoutAll
  #     description: Invalidate current sessions for all users. Use when system was re-configured to force users to login again.
  #     tags:
  #     - APSLogin
  #     responses:
  #       '204':
  #         description: Successful logout.
  #       '400':
  #         $ref: '#/components/responses/BadRequest'
  #       '401':
  #         $ref: '#/components/responses/Unauthorized'
  #       '403':
  #         $ref: '#/components/responses/Forbidden'
  #       '404':
  #         $ref: '#/components/responses/NotFound'
  #       '500':
  #         $ref: '#/components/responses/InternalServerError'
  # /apsLogin/{organization_id}/logoutAll:
  #   parameters:
  #   - $ref: '#/components/parameters/organization_id'
  #   post:
  #     operationId: logoutOrganizationAll
  #     description: Invalidate current sessions for all users in the organization. Use when organization was re-configured to force users to login again.
  #     tags:
  #     - APSLogin
  #     responses:
  #       '204':
  #         description: Successful logout.
  #       '400':
  #         $ref: '#/components/responses/BadRequest'
  #       '401':
  #         $ref: '#/components/responses/Unauthorized'
  #       '403':
  #         $ref: '#/components/responses/Forbidden'
  #       '404':
  #         $ref: '#/components/responses/NotFound'
  #       '500':
  #         $ref: '#/components/responses/InternalServerError'
  # /apsLogin/{user_id}/logout:
  #   parameters:
  #   - $ref: '#/components/parameters/user_id'
  #   post:
  #     operationId: logout
  #     description: Invalidate user session forcing them  to login again.
  #     tags:
  #     - APSLogin
  #     responses:
  #       '204':
  #         description: Successful logout.
  #       '400':
  #         $ref: '#/components/responses/BadRequest'
  #       '401':
  #         $ref: '#/components/responses/Unauthorized'
  #       '403':
  #         $ref: '#/components/responses/Forbidden'
  #       '404':
  #         $ref: '#/components/responses/NotFound'
  #       '500':
  #         $ref: '#/components/responses/InternalServerError'
  /spec:
    get:
      tags:
      - Specification
      responses:
        200:
          description: Return the API specification
          content: {}
components:
  securitySchemes:
    InternalAuthRefreshToken:
      type: apiKey
      in: cookie
      name: refreshToken
    InternalAuthBearerToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    BadRequest:
      description: "Bad Request."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/APSError"
        "*/*":
          schema:
            $ref: "#/components/schemas/APSError"
    Unauthorized:
      description: "Unauthorized."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/APSError"
    Forbidden:
      description: "Forbidden."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/APSError"
    NotFound:
      description: "Not Found."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/APSError"
    InternalServerError:
      description: "Internal Server Error."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/APSError"
    DuplicateKey:
      description: "Object with id already exists."
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/APSError"
  parameters:
    page_size:
      name: pageSize
      in: query
      description: "The number of items to get per page. Min: 1 Max: 100."
      required: false
      schema:
        type: integer
        format: int32
        default: 20
        minimum: 1
        maximum: 100
    page_number:
      name: pageNumber
      in: query
      description: "The page number to get. Min: 1"
      required: false
      schema:
        type: integer
        format: int32
        default: 1
        minimum: 1
    sort_field_name:
      name: sortFieldName
      in: query
      description: The field name of the APSObject to sort by. Must exist on the APSObject.
      example: 'for APSUser: "isActivated", "profile.first".'
      required: false
      schema:
        type: string
    sort_direction:
      name: sortDirection
      in: query
      description: The sort direction.
      required: false
      schema:
        $ref: '#/components/schemas/EAPSSortDirection'
    search_word_list:
      name: searchWordList
      in: query
      description: The list of words separated by &lt;space> to search in the APSObject.
      example: 'first-name last-name'
      required: false
      schema:
        type: string
    search_organization_id:
      name: searchOrganizationId
      in: query
      description: Search for API Objects in a specific organization. Cannot be used with excludeSearchOrganizationId.
      required: false
      schema:
        type: string
    exclude_search_organization_id:
      name: excludeSearchOrganizationId
      in: query
      description: Exclude results from a specific organization from the search for API Objects. Cannot be used with searchOrganizationId.
      required: false
      schema:
        type: string
    search_is_activated:
      name: searchIsActivated
      in: query
      description: Filter search results for APSUser by field isActivated.
      required: false
      schema:
        type: boolean
    search_user_id:
      name: searchUserId
      in: query
      description: Search for APSUsers where userId contains search string.
      required: false
      schema:
        type: string
    user_id:
      name: user_id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/APSUserId"
    connector_id:
      name: connector_id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/APSId"
    organization_id:
      name: organization_id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/APSId"
    businessgroup_id:
      name: businessgroup_id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/APSId"
    external_system_id:
      name: external_system_id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/APSId"
    external_reference_id:
      name: external_reference_id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/APSId"
  schemas:
    APSId:
      description: Unique object id.
      type: string
      minLength: 4
      maxLength: 255
      pattern: ^[A-Za-z0-9_-]*$
    APSIdList:
      description: List of APSId objects.
      type: array
      items:
        $ref: '#/components/schemas/APSId'
    APSDisplayName:
      description: Friendly name of an object for display in UIs. Can be changed after object creation.
      type: string
      minLength: 1
      maxLength: 256
      pattern: "[\\/\\sa-z.A-z0-9_-]*"
    APSDescription:
      type: string
    APSUserId:
      type: string
      minLength: 4
      maxLength: 64
      pattern: ^\S*$
    APSUserIdList:
      type: array
      items:
        $ref: '#/components/schemas/APSUserId'
    APSExternalReference:
      type: object
      additionalProperties: false
      properties:
        externalId:
          type: string
        displayName:
          type: string
        externalSystemId:
          type: string
      required:
      - externalId
      - displayName
      - externalSystemId
    APSHost:
      description: Hostname or IP address.
      type: string
      maxLength: 255
      # from: https://regexr.com/3dt4r
      pattern: ^(localhost)|(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$|^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)+([A-Za-z]|[A-Za-z][A-Za-z0-9\-]*[A-Za-z0-9])$
    APSPort:
      description: Port number.
      type: integer
      minimum: 0
      maximum: 65535
    APSEmail:
      description: E-Mail address.
      type: string
      minLength: 1
      maxLength: 512
      # format: email
      # from: https://regexr.com/3e48o
      pattern: ^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$
    APSOrganizationIdList:
      type: array
      items:
        type: string
    APSOrganizationRoles:
      type: object
      properties:
        organizationId:
          type: string
        roles:
          $ref: "#/components/schemas/APSOrganizationAuthRoleList"
      required:
      - organizationId
      - roles
    APSOrganizationRolesResponse:
      type: object
      # additionalProperties: false
      allOf:
      - $ref: '#/components/schemas/APSOrganizationRoles'
      properties:
        organizationDisplayName:
          description: Display name of the organization. If organization not found, set to organizationId.
          type: string
      required:
      - organizationDisplayName
    APSOrganizationRolesList:
      description: List of Organization Roles.
      type: array
      items:
        $ref: "#/components/schemas/APSOrganizationRoles"
    APSOrganizationRolesResponseList:
      description: List of Organization Roles responses.
      type: array
      items:
        $ref: "#/components/schemas/APSOrganizationRolesResponse"

    APSSessionInfo:
      description: User session info.
      type: object
      properties:
        businessGroupId:
          $ref: "#/components/schemas/APSId"
      required:
      - businessGroupId
    APSOrganizationSessionInfo:
      description: User session info for an organization.
      type: object
      properties:
        organizationId:
          $ref: "#/components/schemas/APSId"
        lastSessionInfo:
          $ref: "#/components/schemas/APSSessionInfo"
      required:
      - organizationId
      - lastSessionInfo
    APSOrganizationSessionInfoList:
      description: List of APSOrganizationSessionInfo objects.
      type: array
      items:
        $ref: "#/components/schemas/APSOrganizationSessionInfo"

    APSBusinessGroupAuthRoleList:
      type: array
      items:
        $ref: "#/components/schemas/EAPSBusinessGroupAuthRole"
      minItems: 0

    APSMemberOfBusinessGroup:
      description: Business group and roles.
      type: object
      properties:
        businessGroupId:
          $ref: "#/components/schemas/APSId"
        roles:
          $ref: "#/components/schemas/APSBusinessGroupAuthRoleList"
      required:
      - businessGroupId
      - roles

    APSMemberOfOrganizationGroups:
      description: List of business groups with roles for an organization.
      type: object
      properties:
        organizationId:
          $ref: "#/components/schemas/APSId"
        memberOfBusinessGroupList:
          type: array
          items:
            $ref: "#/components/schemas/APSMemberOfBusinessGroup"
      required:
        - organizationId
        - memberOfBusinessGroupList

    APSMemberOfOrganizationGroupsList:
      description: List of APSMemberOfOrganizationGroups objects.
      type: array
      items:
        $ref: "#/components/schemas/APSMemberOfOrganizationGroups"


    EAPSSortDirection:
      description: sort direction for query
      type: string
      enum:
      - asc
      - desc
    APSListResponseMeta:
      type: object
      properties:
        meta:
          type: object
          properties:
            totalCount:
              description: The total count of objects in the collection at time of call.
              type: integer
              format: int32
          required:
            - totalCount
      required:
        - meta
    APSErrorIds:
      description: "The error Id which uniquely identifies the error that has occurred."
      type: string
      enum:
      - duplicateKey
      - keyNotFound
      - deleteNotAllowedForKey
      - internalServerError
      - serverNotOperational
      - missingParameter
      - openApiRequestValidation
      - openApiResponseValidation
      - objectNotFound
      - notAuthorized
      - corsNotAllowed
      - pathNotFound
      - invalidSortFieldName
      - invalidQueryParameterCombination
      - invalidObjectReferences
      - dependantObjects
      - organizationNotFound
      - requestValidation
    APSErrorMeta:
      type: object
      description: Additional details about the error.
      additionalProperties:
        anyOf:
        - type: string
        - type: number
        - type: integer
        - type: boolean
        - type: array
          items: {}
        - type: object
    APSError:
      type: object
      properties:
        description:
          type: string
          description: "The verbose description of the problem."
        appId:
          description: The Id of the Server.
          type: string
        errorId:
          $ref: "#/components/schemas/APSErrorIds"
        meta:
          $ref: "#/components/schemas/APSErrorMeta"
      required:
      - description
      - errorId
      - appId
    APSStatus:
      description: Status information about the Server.
      type: object
      properties:
        isReady:
          description: Overall status if Server is operational and ready.
          type: boolean
        timestamp:
          description: Timestamp of reading.
          type: number
      required:
      - isReady
      - timestamp
    APSAbout:
      description: Information about the Server.
      type: object
      properties:
        name:
          description: The name of the Server.
          type: string
        description:
          type: string
        author:
          type: string
        license:
          type: string
        versions:
          description: The versions of the various components.
          type: object
          properties:
            apim-server-openapi:
              type: string
            apim-server:
              type: string
          required:
          - apim-server-openapi
          - apim-server
        repository:
          description: Meta data about the repository.
          type: object
          properties:
            type:
              type: string
            url:
              type: string
            revision:
              type: object
              properties:
                sha1:
                  type: string
              required:
              - sha1
          required:
          - type
          - url
          - revision
        issues_url:
          type: string
        build_date:
          type: string
      required:
      - name
      - description
      - author
      - license
      - versions
      - repository
      - issues_url
      - build_date

    EAPSBusinessGroupAuthRole:
      type: string
      enum:
      - organizationAdmin
      - businessGroupAdmin
      - apiTeam
      - apiConsumer
      - apiViewer
    EAPSOrganizationAuthRole:
      type: string
      enum:
      - organizationAdmin
      - businessGroupAdmin
      - apiTeam
      - apiConsumer
      - apiViewer
    EAPSSystemAuthRole:
      type: string
      enum:
      - root
      - systemAdmin
    APSOrganizationAuthRoleList:
      type: array
      items:
        $ref: "#/components/schemas/EAPSOrganizationAuthRole"
      minItems: 1
    APSSystemAuthRoleList:
      type: array
      items:
        $ref: "#/components/schemas/EAPSSystemAuthRole"
    EAPSClientProtocol:
      type: string
      enum:
      - http
      - https
    APSLocationConfigExternal:
      description: External URL location information.
      type: object
      properties:
        configType:
          type: string
          enum:
          - External
        protocol:
          $ref: "#/components/schemas/EAPSClientProtocol"
        host:
          $ref: "#/components/schemas/APSHost"
        port:
          $ref: "#/components/schemas/APSPort"
      required:
      - configType
      - protocol
      - host
      - port
    APSLocationConfigInternalProxy:
      description: Internal Proxy URL location information.
      type: object
      properties:
        configType:
          type: string
          enum:
          - Internal Proxy
      required:
      - configType
    APSLocationConfig:
      description: Location configuration.
      anyOf:
      - $ref: '#/components/schemas/APSLocationConfigExternal'
      - $ref: '#/components/schemas/APSLocationConfigInternalProxy'
    APSConnectorClientConfig:
      description: Configuration of the client for the connector.
      type: object
      properties:
        locationConfig:
          $ref: '#/components/schemas/APSLocationConfig'
        apiVersion:
          type: string
        serviceUser:
          description: A user who has access to all resources of the connector.
          type: string
        serviceUserPwd:
          description: The password for the serviceUser.
          type: string
        basePath:
          type: string
          description: Base path prepended to connector resource path. Useful when using a proxy.
      required:
      - locationConfig
      - apiVersion
      - serviceUser
      - serviceUserPwd
    ListApsConnectorsResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/APSListResponseMeta'
      properties:
        list:
          $ref: '#/components/schemas/APSConnectorList'
      required:
      - list
    APSConnectorList:
      description: Array of APSConnector objects.
      type: array
      items:
        $ref: '#/components/schemas/APSConnector'
    APSConnector:
      description: An APSConnector object.
      type: object
      properties:
        connectorId:
          $ref: "#/components/schemas/APSId"
        isActive:
          type: boolean
        displayName:
          type: string
        description:
          type: string
        connectorClientConfig:
          $ref: "#/components/schemas/APSConnectorClientConfig"
      required:
        - displayName
        - description
        - connectorClientConfig
        - connectorId
        - isActive
    APSConnectorCreate:
      description: Create an APSConnector object.
      type: object
      properties:
        connectorId:
          $ref: "#/components/schemas/APSId"
        displayName:
          type: string
        description:
          type: string
        connectorClientConfig:
          $ref: "#/components/schemas/APSConnectorClientConfig"
      required:
        - displayName
        - description
        - connectorClientConfig
        - connectorId
    APSConnectorReplace:
      description: Replace an existing APSConnector object.
      type: object
      properties:
        displayName:
          type: string
        description:
          type: string
        connectorClientConfig:
          $ref: "#/components/schemas/APSConnectorClientConfig"
      required:
        - displayName
        - description
        - connectorClientConfig

    ListAPSExternalSystemsResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/APSListResponseMeta'
      properties:
        list:
          $ref: '#/components/schemas/APSExternalSystemList'
      required:
      - list
    APSExternalSystemList:
      description: Array of APSExternalSystem objects.
      type: array
      items:
        $ref: '#/components/schemas/APSExternalSystem'
    APSIsMarketPlaceDestination:
      description: Flag to indicate whether this system is also an external marketplace where to publish entities to. Defaults to false.
      type: boolean
    APSExternalSystem:
      type: object
      additionalProperties: false
      properties:
        externalSystemId:
          $ref: "#/components/schemas/APSId"
        displayName:
          $ref: "#/components/schemas/APSDisplayName"
        description:
          $ref: "#/components/schemas/APSDescription"
        isMarketplaceDestination:
          $ref: "#/components/schemas/APSIsMarketPlaceDestination"
      required:
        - externalSystemId
        - displayName
        - description
    APSExternalSystemCreate:
      allOf:
      - description: Create request for an APSExternalSystem object.
      - $ref: "#/components/schemas/APSExternalSystem"
    APSExternalSystemUpdate:
      description: Update request for an APSExternalSystem object.
      type: object
      additionalProperties: false
      properties:
        displayName:
          $ref: "#/components/schemas/APSDisplayName"
        description:
          $ref: "#/components/schemas/APSDescription"
        isMarketplaceDestination:
          $ref: "#/components/schemas/APSIsMarketPlaceDestination"

    ListAPSOrganizationResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/APSListResponseMeta'
      properties:
        list:
          $ref: '#/components/schemas/APSOrganizationList'
      required:
      - list
    APSOrganizationList:
      description: Array of APSOrganizations.
      type: array
      items:
        $ref: '#/components/schemas/APSOrganization'
    APSMaxNumApisPerApiProduct:
      type: integer
      description:
        Value of '-1' indicates no restriction. Value > 0 restricts the number of APIs each API Product can use.
    APSAppCredentialsExpiryDuration:
      type: integer
      description:
        The expiry of API consumer app credentials in milliseconds. Value of '-1' indicates no expiry. Value > 0 indicates expiry after Value milliseconds, min of 1 day.
    APSOrganization:
      type: object
      additionalProperties: false
      properties:
        organizationId:
          $ref: "#/components/schemas/APSId"
        displayName:
          $ref: "#/components/schemas/APSDisplayName"
        maxNumApisPerApiProduct:
          $ref: "#/components/schemas/APSMaxNumApisPerApiProduct"
        appCredentialsExpiryDuration:
          $ref: "#/components/schemas/APSAppCredentialsExpiryDuration"
      required:
        - organizationId
        - displayName
        - maxNumApisPerApiProduct
        - appCredentialsExpiryDuration
    APSOrganizationCreate:
      allOf:
      - description: Create request for an APSOrganization object.
      - $ref: "#/components/schemas/APSOrganization"
    APSOrganizationUpdate:
      description: Update request for an APSOrganization object.
      type: object
      additionalProperties: false
      properties:
        displayName:
          $ref: "#/components/schemas/APSDisplayName"
        maxNumApisPerApiProduct:
          $ref: "#/components/schemas/APSMaxNumApisPerApiProduct"
        appCredentialsExpiryDuration:
          $ref: "#/components/schemas/APSAppCredentialsExpiryDuration"
    APSUserLoginCredentials:
      type: object
      description: Login credentials.
      properties:
        username:
          type: string
        password:
          type: string
      required:
      - username
      - password

    APSLoginInternal:
      type: object
      properties:
        loginInternal:
          type: boolean
    APSSessionLoginResponse:
      type: object
      description: temporary for testing.
      allOf:
      - $ref: '#/components/schemas/APSUserResponse'
      properties:
        token:
          type: string
        lastOrganizationId:
          $ref: '#/components/schemas/APSId'
      required:
        - token
    APSSessionRefreshTokenResponse:
      type: object
      description: The refreshed token.
      properties:
        success:
          type: boolean
        organizationId:
          $ref: "#/components/schemas/APSId"
        userId:
          $ref: "#/components/schemas/APSUserId"
        token:
          type: string
      required:
      - success
      - token
      - userId
    APSSessionLogoutResponse:
      type: object
      properties:
        success:
          type: boolean
      required:
      - success
    APSSecureTestResponse:
      type: object
      properties:
        success:
          type: boolean
      required:
      - success
    APSUserLoginAsRequest:
      type: object
      description: Login as request.
      properties:
        userId:
          $ref: '#/components/schemas/APSUserId'
      required:
      - userId

    APSUserName:
      type: string
      minLength: 2
      maxLength: 128
      pattern: "([[:punct:]]|[a-zA-Z])*"
    APSUserProfile:
      type: object
      description: User profile info.
      properties:
        first:
          $ref: '#/components/schemas/APSUserName'
        last:
          $ref: '#/components/schemas/APSUserName'
        email:
          $ref: '#/components/schemas/APSEmail'
      required:
        - first
        - last
        - email
    APSUserProfileUpdate:
      type: object
      description: User profile info.
      properties:
        first:
          $ref: '#/components/schemas/APSUserName'
        last:
          $ref: '#/components/schemas/APSUserName'
        email:
          $ref: '#/components/schemas/APSEmail'
    ListApsUsersResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/APSListResponseMeta'
      properties:
        list:
          $ref: '#/components/schemas/APSUserResponseList'
      required:
      - list
    APSUserBase:
      description: "Base object of a user."
      type: object
      properties:
        isActivated:
          type: boolean
        userId:
          $ref: "#/components/schemas/APSUserId"
        profile:
          $ref: "#/components/schemas/APSUserProfile"
        systemRoles:
          allOf:
            - description: System roles applicable across any organization.
            - $ref: '#/components/schemas/APSSystemAuthRoleList'
      required:
        - isActivated
        - userId
        - profile
    APSUserCreate:
      description: "A user."
      type: object
      allOf:
      - $ref: '#/components/schemas/APSUserBase'
      properties:
        memberOfOrganizations:
          $ref: '#/components/schemas/APSOrganizationRolesList'
        memberOfOrganizationGroups:
          $ref: '#/components/schemas/APSMemberOfOrganizationGroupsList'
        organizationSessionInfoList:
          $ref: '#/components/schemas/APSOrganizationSessionInfoList'
        password:
          type: string
      required:
        - isActivated
        - userId
        - password
        - profile
    APSUserResponse:
      type: object
      allOf:
      - $ref: '#/components/schemas/APSUserBase'
      properties:
        memberOfOrganizations:
          $ref: '#/components/schemas/APSOrganizationRolesResponseList'
        memberOfOrganizationGroups:
          $ref: '#/components/schemas/APSMemberOfOrganizationGroupsList'
        organizationSessionInfoList:
          $ref: '#/components/schemas/APSOrganizationSessionInfoList'
      required:
      - memberOfOrganizations
      - memberOfOrganizationGroups
      - organizationSessionInfoList
    APSUserResponseList:
      description: Array of APSUserResponses.
      type: array
      items:
        $ref: '#/components/schemas/APSUserResponse'
    APSUserUpdate:
      description: Update for an APSUser object.
      type: object
      additionalProperties: false
      properties:
        isActivated:
          type: boolean
        password:
          type: string
        profile:
          $ref: "#/components/schemas/APSUserProfileUpdate"
        systemRoles:
          allOf:
            - description: System roles applicable across any organization.
            - $ref: '#/components/schemas/APSSystemAuthRoleList'
        memberOfOrganizations:
          allOf:
            - $ref: '#/components/schemas/APSOrganizationRolesList'
            - description: List of organizations the user is a member of include organization roles.
        memberOfOrganizationGroups:
          $ref: '#/components/schemas/APSMemberOfOrganizationGroupsList'
        organizationSessionInfoList:
          $ref: '#/components/schemas/APSOrganizationSessionInfoList'
        lastOrganizationId:
          $ref: "#/components/schemas/APSId"
    #
    # Business Groups
    #

    APSBusinessGroupResponse:
      description: The APSBusinessGroupResponse object.
      type: object
      additionalProperties: false
      properties:
        businessGroupId:
          $ref: "#/components/schemas/APSId"
        displayName:
          $ref: "#/components/schemas/APSDisplayName"
        description:
          $ref: "#/components/schemas/APSDescription"
        businessGroupParentId:
          $ref: "#/components/schemas/APSId"
        externalReference:
          $ref: '#/components/schemas/APSExternalReference'
        businessGroupChildIds:
          $ref: "#/components/schemas/APSIdList"
        members:
          $ref: '#/components/schemas/APSUserIdList'
      required:
      - businessGroupId
      - displayName
      - description
      - businessGroupChildIds
      - members
    APSBusinessGroupResponseList:
      description: Array of APSBusinessGroupResponse objects.
      type: array
      items:
        $ref: '#/components/schemas/APSBusinessGroupResponse'
    ListAPSBusinessGroupsResponse:
      type: object
      allOf:
        - $ref: '#/components/schemas/APSListResponseMeta'
      properties:
        list:
          $ref: '#/components/schemas/APSBusinessGroupResponseList'
      required:
      - list
    APSBusinessGroupCreate:
      description: Create an APSBusinessGroup object.
      type: object
      additionalProperties: false
      properties:
        businessGroupId:
          $ref: "#/components/schemas/APSId"
        displayName:
          $ref: "#/components/schemas/APSDisplayName"
        description:
          $ref: "#/components/schemas/APSDescription"
        businessGroupParentId:
          $ref: "#/components/schemas/APSId"
        externalReference:
          $ref: '#/components/schemas/APSExternalReference'
      required:
      - businessGroupId
      - businessGroupParentId
      - displayName
      - description
    APSBusinessGroupUpdate:
      description: Update for an APSBusinessGroup object.
      type: object
      additionalProperties: false
      properties:
        description:
          $ref: "#/components/schemas/APSDescription"
        displayName:
          $ref: "#/components/schemas/APSDisplayName"
        externalReference:
          $ref: '#/components/schemas/APSExternalReference'

###
# The End.
